% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mod_response_entry_doc.R,
%   R/mod_response_entry_server.R, R/mod_response_entry_ui.R
\name{mod_response_entry}
\alias{mod_response_entry}
\alias{mod_response_entry_server}
\alias{mod_response_entry_ui}
\title{Speaker Data Entry and Report Generation Module}
\usage{
mod_response_entry_server(
  id,
  df_input_speaker_info,
  df_input_response_previous = NULL
)

mod_response_entry_ui(id)
}
\arguments{
\item{id}{The namespace `id`, used to uniquely identify Shiny modules and UI components within the VOX Analysis package.}

\item{df_input_speaker_info}{A `data.frame` containing general information about a speaker (the subject of the VOX Analysis), as provided by the user. For an example, run `data("df_input_speaker_info")`.}

\item{df_input_response_previous}{A `data.frame` similar to `df_summarized_response` but represents past evaluations uploaded by the end user to distinguish prior assessments from current ones.}
}
\description{
This Shiny module provides a user interface and server function that allows users to enter speaker data for a VOX Analysis and generate a corresponding report. The module is designed to streamline data entry and report generation within the analysis workflow.
}
\examples{
if (interactive()) {
  # Load example speaker information data
  data("df_input_speaker_info_example")

  # Define the UI with data entry and report functionality
  ui <- page(
    useShinyjs(),
    mod_response_entry_ui("data_entry")
  )

  # Set up the server to include data entry functionality
  server <- function(input, output, session) {
    mod_response_entry_server("data_entry", df_input_speaker_info_example)
  }

  # Run the Shiny app
  shinyApp(ui, server)
}

if (interactive()) {
  # Alternative example using a pre-built app function
  run_example_measurement_entry_app()
}

}
